---

- name: Check that user exists
  shell: "grep -q {{ user_item.username }} /etc/passwd"
  ignore_errors: yes
  register: userexist

- set_fact:
    has_home: "{{ (user_item.home_create|d(false)) == True }}"

- set_fact:
    user_home: "{{ user_item.home|d('/home/' + user_item.username ) }}"
  when: has_home

- name: "Start configure {{ user_item.username }}"
  become_user: "{{ user_item.username }}"
  when:
    - userexist is succeeded
    - user_item.username not in users_no_ssh
  block:
  - name: Fetch main user info from github api
    uri:
      url: "http://{{ github_api }}/user/emails"
      return_content: yes
      headers:
        Authorization: "token {{ user_item.github_user_token }}"
    register: response_user_emails
    when: user_item.github_user_token | default(false)

  - name: Emails list github
    debug:
       msg: "{{ response_user_emails }}"

  - name: Create user objects
    set_fact:
      key_value: user_emails
      cacheable: yes
      user_emails: "{{ response_user_emails.json }}"
    when: >
      (response_user_emails.skipped|d(false) != true or
      response_user_emails.status|d(false) == 200) | d(false)

  - name: apply git config to each user
    become: yes
    become_user: root
    template:
      src: "{{ item.src }}"
      dest: "{{ user_home }}/{{ item.dest }}"
      owner:  "{{ user_item.username }}"
      group:  "{{ user_item.username }}"
    with_items:
        - { src: gitconfig.j2, dest: ".gitconfig" }
    when: user_item.home_create|d(false) == True

  - name: cat user public key
    tags: [user_github]
    command: "cat {{ user_home }}/.ssh/id_rsa.pub"
    register: user_public_key
    when:
      - user_item.ssh_key_generate | d(false)
      - has_home

  - name: Create a public key
    tags: [user_github]
    uri:
      url: "https://{{ github_api }}/user/keys"
      headers:
        Authorization: "token {{ user_item.github_user_token }}"
      method: POST
      body:
        title: "ansible_{{ user_item.username }}"
        key: "{{ user_public_key.stdout }}"
      status_code: 201, 422, 301
      body_format: json
    when: user_item.ssh_key_generate | d(false)

  - name: Add trusted hosts
    tags: [known-hosts]
    known_hosts:
      name: "{{ item }}"
      key: "{{ lookup('pipe', 'ssh-keyscan ' + item) }}"
      state: present
    loop: "{{ known_hosts_keys }}"

  - name: ensure zsh config exist if zsh is shared
    file:
      path: "{{ user_home }}/.zshrc"
      state: touch
    become_user: "{{ user_item.username }}"
    when: zsh_shared == true and has_home

  - name: Include zsh config
    lineinfile:
      path: "{{ user_home }}/.zshrc"
      line: "source /usr/share/zsh-config/.zshrc"
    when: zsh_shared == true and has_home
